name: Daily LinkedIn Content Generation

on:
  schedule:
    # Run at 8:00 AM UTC (adjust for your timezone)
    - cron: '0 8 * * *'
  workflow_dispatch:
    inputs:
      force_run:
        description: 'Force run even if API limits are reached'
        required: false
        default: 'false'

permissions:
  contents: write
  issues: write
  statuses: write
  actions: read

env:
  NODE_VERSION: '18'

jobs:
  generate-content:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Install Puppeteer dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libasound2t64 \
          libatk1.0-0 \
          libc6 \
          libcairo2 \
          libcups2 \
          libdbus-1-3 \
          libexpat1 \
          libfontconfig1 \
          libgcc-s1 \
          libgdk-pixbuf2.0-0 \
          libglib2.0-0 \
          libgtk-3-0 \
          libnspr4 \
          libpango-1.0-0 \
          libpangocairo-1.0-0 \
          libstdc++6 \
          libx11-6 \
          libx11-xcb1 \
          libxcb1 \
          libxcomposite1 \
          libxcursor1 \
          libxdamage1 \
          libxext6 \
          libxfixes3 \
          libxi6 \
          libxrandr2 \
          libxrender1 \
          libxss1 \
          libxtst6 \
          ca-certificates \
          fonts-liberation \
          libappindicator3-1 \
          libnss3 \
          lsb-release \
          xdg-utils \
          wget

    - name: Create .env file
      run: |
        echo "GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}" > .env

    - name: Check API Usage Limits
      id: check-limits
      run: |
        echo "Checking API limits..."
        npx ts-node -e "
        import { checkApiLimits, displayUsageStats } from './api-usage-monitor';
        (async () => {
          try {
            const limits = await checkApiLimits(2, 1500);
            console.log('API_LIMIT_CHECK=' + JSON.stringify(limits));
            await displayUsageStats();
            if (!limits.canProceed) {
              console.log('API limits reached, setting skip flag');
              process.exit(0);
            }
          } catch (error) {
            console.error('Error checking API limits:', error);
            console.log('Proceeding with content generation despite error');
            process.exit(0);
          }
        })();
        " | tee api_check.log

    - name: Generate Content
      id: generate-content
      run: |
        echo "Starting content generation..."
        npx ts-node programming-content.ts | tee generation.log || {
          echo "Content generation failed, but continuing workflow"
          echo "GENERATION_FAILED=true" >> $GITHUB_OUTPUT
          exit 0
        }

    - name: Get Current Usage Stats
      id: usage-stats
      run: |
        echo "Getting usage statistics..."
        npx ts-node -e "
        import { getCurrentUsage } from './api-usage-monitor';
        (async () => {
          try {
            const usage = await getCurrentUsage();
            console.log('Daily Requests: ' + usage.dailyRequests);
            console.log('Daily Tokens: ' + usage.dailyTokens);
            console.log('Usage Percentage: ' + usage.usagePercentage);
            
            // Write to GitHub outputs using fs
            const fs = require('fs');
            const outputData = [
              'DAILY_REQUESTS=' + usage.dailyRequests,
              'DAILY_TOKENS=' + usage.dailyTokens,
              'REQUESTS_REMAINING=' + (50 - usage.dailyRequests),
              'TOKENS_REMAINING=' + (32000 - usage.dailyTokens),
              'USAGE_PERCENTAGE=' + usage.usagePercentage
            ].join('\n');
            
            if (process.env.GITHUB_OUTPUT) {
              fs.appendFileSync(process.env.GITHUB_OUTPUT, outputData + '\n');
            }
          } catch (error) {
            console.error('Error getting usage stats:', error);
            // Set default values
            if (process.env.GITHUB_OUTPUT) {
              const defaultData = [
                'DAILY_REQUESTS=0',
                'DAILY_TOKENS=0', 
                'REQUESTS_REMAINING=50',
                'TOKENS_REMAINING=32000',
                'USAGE_PERCENTAGE=0'
              ].join('\n');
              const fs = require('fs');
              fs.appendFileSync(process.env.GITHUB_OUTPUT, defaultData + '\n');
            }
          }
        })();
        " | tee usage_stats.log

    - name: Create Usage Report
      run: |
        cat > usage_report.md << 'EOF'
        # 📊 Daily API Usage Report

        **Generated on:** $(date)

        ## 🔑 Gemini API Usage
        - **Requests Used:** ${{ steps.usage-stats.outputs.DAILY_REQUESTS }}/50
        - **Tokens Used:** ${{ steps.usage-stats.outputs.DAILY_TOKENS }}/32,000
        - **Requests Remaining:** ${{ steps.usage-stats.outputs.REQUESTS_REMAINING }}
        - **Tokens Remaining:** ${{ steps.usage-stats.outputs.TOKENS_REMAINING }}
        - **Usage Percentage:** ${{ steps.usage-stats.outputs.USAGE_PERCENTAGE }}%

        ## 📈 Status
        ${{ steps.check-limits.outcome == 'success' && '✅ Content generated successfully' || '⚠️ API limits reached' }}

        ## 📁 Generated Content
        Check the `content_$(date +%Y-%m-%d)` folder for today's posts.

        ---
        *This report is automatically generated by the LinkedIn Content Engine*
        EOF

    - name: Upload Content Artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: daily-content-${{ github.run_number }}
        path: |
          content_*
          *.log
          usage_report.md
        retention-days: 30

    - name: Update README with Usage Stats
      if: always()
      run: |
        echo "Updating README with usage stats..."
        # Only update if we have valid stats
        if [ "${{ steps.usage-stats.outputs.DAILY_REQUESTS }}" != "" ]; then
          sed -i "s/Daily Requests: .*/Daily Requests: ${{ steps.usage-stats.outputs.DAILY_REQUESTS }}\/50/" README.md || echo "Could not update requests in README"
          sed -i "s/Daily Tokens: .*/Daily Tokens: ${{ steps.usage-stats.outputs.DAILY_TOKENS }}\/32,000/" README.md || echo "Could not update tokens in README"
          sed -i "s/Last Updated: .*/Last Updated: $(date)/" README.md || echo "Could not update date in README"
        else
          echo "No usage stats available to update README"
        fi

    - name: Commit Usage Updates
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add README.md api-usage.json || true
        if [[ -n $(git status --porcelain) ]]; then
          git commit -m "📊 Update API usage stats - $(date)"
        else
          echo "No changes to commit"
        fi

    - name: Push changes
      if: always()
      run: |
        if [[ -n $(git status --porcelain) ]]; then
          git push origin main
        else
          echo "No changes to push"
        fi

    - name: Create Issue on API Limit Reached
      if: steps.check-limits.outcome == 'failure'
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const dailyRequests = '${{ steps.usage-stats.outputs.DAILY_REQUESTS }}' || '0';
          const dailyTokens = '${{ steps.usage-stats.outputs.DAILY_TOKENS }}' || '0';
          
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: '⚠️ API Limits Reached - ' + new Date().toDateString(),
            body: `## API Usage Alert
            
            The daily API limits have been reached:
            - Requests: ${dailyRequests}/50
            - Tokens: ${dailyTokens}/32,000
            
            Content generation was skipped for today. The limits will reset at midnight UTC.
            
            **Action Required:** Monitor usage or consider upgrading the API plan if this becomes frequent.
            `,
            labels: ['api-usage', 'alert']
          });

    - name: Post Status to Repository
      if: always()
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const isSuccess = '${{ steps.check-limits.outcome }}' === 'success';
          const status = isSuccess ? '✅ Success' : '⚠️ Limited';
          const usage = '${{ steps.usage-stats.outputs.USAGE_PERCENTAGE }}' || '0';
          
          github.rest.repos.createCommitStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            sha: context.sha,
            state: isSuccess ? 'success' : 'failure',
            description: `API Usage: ${usage}% | Status: ${status}`,
            context: 'Daily Content Generation'
          });
